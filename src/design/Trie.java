package design;import java.util.ArrayList;import java.util.List;public class Trie {TreeNode<Character> root; /** Initialize your data structure here. */ public Trie() {    root = new TreeNode<>(null, new ArrayList<>(), false); } class TreeNode<T> {  T val;  List<TreeNode<T>> subNodes;// tail tree should use char[] insteadof arraylist.  boolean isTail;  public TreeNode(T val, List<TreeNode<T>> sub, boolean isTail) {   this.val = val;   subNodes = sub;   this.isTail = isTail;  } } /** Inserts a word into the trie. */    public void insert(String word) {        TreeNode<Character> tmp = root;        for(int i=0; i<word.length(); ) {             int curr = i;             for(TreeNode<Character> treeNode : tmp.subNodes) {                 if (treeNode.val.equals(word.charAt(i))) {                     i++;                     tmp = treeNode;                     continue;                 }             }             if (curr == i) {                TreeNode<Character> node = new TreeNode<>(word.charAt(curr), new ArrayList<>(), false);                tmp.subNodes.add(node);                tmp = node;                i++;             }        }        tmp.isTail = true; } /** Returns if the word is in the trie. */ public boolean search(String word) {     TreeNode<Character> tmp = root;     for (int i = 0; i < word.length(); ) {         int curr = i;         for (TreeNode<Character> node : tmp.subNodes) {             if (node.val == word.charAt(i)) {                 i++;                 tmp = node;                 continue;             }         }         if (curr == i) {             return false;         }     }     return tmp.isTail; } /** Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) {     List<TreeNode<Character>> subNodes = root.subNodes;     for (int i = 0; i < prefix.length(); ) {         int curr = i;         for (TreeNode<Character> node : subNodes) {             if (node.val == prefix.charAt(i)) {                 i++;                 subNodes = node.subNodes;             }         }         if (curr == i) {             return false;         }     }     return true; }    public static void main(String[] args) {        Trie trie = new Trie();        trie.insert("apple");        System.out.println(trie.search("apple"));        System.out.println(trie.search("app"));        System.out.println(trie.startsWith("app"));        trie.insert("app");        System.out.println(trie.search("app"));    }}/** * Your Trie object will be instantiated and called as such: * Trie obj = new Trie(); * obj.insert(word); * boolean param_2 = obj.search(word); * boolean param_3 = obj.startsWith(prefix); */